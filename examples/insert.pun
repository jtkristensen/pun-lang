equal : integer -> integer -> boolean .
equal m n =
  if   m <= n
  then n <= m
  else false .

not : boolean -> boolean .
not b =
  if b then false else true .

and : boolean -> boolean -> boolean .
and b1 b2 =
  if b1 then b2 else false .

less : integer -> integer -> boolean .
less m n = and (m <= n) (not (equal m n)) .

greater : integer -> integer -> boolean .
greater m n = not (m <= n) .

insert : integer -> integer -> bst integer integer -> bst integer integer .
insert k1 v1 t =
  case t of
  ; leaf      -> [node leaf k1 v1 leaf]
  ; [node l k2 v2 r] ->
    if equal k1 k2
    then [node l k2 v1 r]
    else if   k1 <= k2
         then [node (insert k1 v1 l) k2 v2 r]
         else if   greater k1 k2
              then [node l k2 v2 (insert k1 v1 r)]
              else [node (leaf) k1 v1 (leaf)] .