findMin : bst integer integer -> bst integer integer .
findMin t =
    case t of
    ; leaf           -> leaf
    ; [node l k v r] ->
        case l of
        ; leaf               -> [node leaf k v leaf]
        ; [node l1 k1 v1 r1] -> findMin l1 .

delete : integer -> integer -> bst integer integer -> bst integer integer .
delete k v t =
    case t of
    ; leaf             -> leaf
    ; [node l k1 v1 r] -> 
        if   less k k1
        then [node (delete k v l) k1 v1 r]
        else if larger k k1
            then [node l k1 v1 (delete k v r)]
            else (delete1 k1 v1 t) .

delete1 : integer -> integer -> bst integer integer -> bst integer integer.
delete1 k v t =
    case t of
    ; leaf             -> leaf
    ; [node l k1 v1 r] ->
          case l of
          ; leaf               -> r
          ; [node l1 k2 v2 r1] ->
            case r of
            ; leaf               -> l
            ; [node l2 k3 v3 r2] ->
                case (findMin r) of
                ; leaf                 -> leaf
                ; [node leaf minKey minVal leaf] -> [node l minKey minVal (delete minKey minVal r)] .