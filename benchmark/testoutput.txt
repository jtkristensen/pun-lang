BST-bug-1.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> .................................................. ok
testing:union-valid> .................................................. ok
testing:nil-model> .................................................. ok
testing:insert-model> .x failed:
shrinking> if valid (Node [Leaf [], 19, 27, Leaf []]) then toList (insert (-24) (11) (Node [Leaf [], 19, 27, Leaf []])) == listInsert (IIP [-24, 11]) (deleteKey (-24) (toList (Node [Leaf [], 19, 27, Leaf []]))) else True
after 5 tests.
testing:delete-model> ...x failed:
shrinking> if valid (Node [Node [Leaf [], -11, 4, Node [Leaf [], 7, -11, Leaf []]], 14, -25, Leaf []]) then toList (delete (14) (Node [Node [Leaf [], -11, 4, Node [Leaf [], 7, -11, Leaf []]], 14, -25, Leaf []])) == deleteKey (14) (toList (Node [Node [Leaf [], -11, 4, Node [Leaf [], 7, -11, Leaf []]], 14, -25, Leaf []])) else True
after 5915 tests.
testing:find-model> .................................................. ok
testing:insert-post> .x failed:
shrinking> if valid (Node [Leaf [], -18, -4, Leaf []]) then find (-18) (insert (-1) (7) (Node [Leaf [], -18, -4, Leaf []])) == if -1 == -18 then Just [7] else find (-18) (Node [Leaf [], -18, -4, Leaf []]) else True
after 123 tests.
testing:insert-post-same-key> .................................................. ok
testing:union-post> .x failed:
shrinking> if and (valid (Node [Node [Leaf [], -21, -3, Leaf []], -9, 13, Leaf []])) (valid (Leaf [])) then find (-9) (union (Node [Node [Leaf [], -21, -3, Leaf []], -9, 13, Leaf []]) (Leaf [])) == case find (-9) (Node [Node [Leaf [], -21, -3, Leaf []], -9, 13, Leaf []]) of
  ; Just [v] -> Just [v]
  ; Nothing [] -> case find (-9) (Leaf []) of
  ; Just [v1] -> Just [v1]
  ; Nothing [] -> Nothing [] else True
after 498 tests.
testing:find-post-present> .................................................. ok
testing:find-post-absent> .................................................. ok
testing:insert-delete-complete> .x failed:
shrinking> if valid (Node [Leaf [], -23, -20, Node [Leaf [], -3, 12, Leaf []]]) then case find (-23) (Node [Leaf [], -23, -20, Node [Leaf [], -3, 12, Leaf []]]) of
  ; Nothing [] -> Node [Leaf [], -23, -20, Node [Leaf [], -3, 12, Leaf []]] == delete (-23) (Node [Leaf [], -23, -20, Node [Leaf [], -3, 12, Leaf []]])
  ; Just [v] -> Node [Leaf [], -23, -20, Node [Leaf [], -3, 12, Leaf []]] == insert (-23) (v) (Node [Leaf [], -23, -20, Node [Leaf [], -3, 12, Leaf []]]) else True
after 42 tests.
testing:insert-insert-weak> .x failed:
shrinking> if and (valid (Leaf [])) (not (-5 == -10)) then equalContents (insert (-5) (-16) (insert (-10) (4) (Leaf []))) (insert (-10) (4) (insert (-5) (-16) (Leaf []))) else True
after 1 tests.
testing:insert-insert> x failed:
shrinking> if valid (Leaf []) then equalContents (insert (-13) (13) (insert (-5) (25) (Leaf []))) (if -13 == -5 then insert (-13) (13) (Leaf []) else insert (-5) (25) (insert (-13) (13) (Leaf []))) else True
after 0 tests.
testing:insert-delete-weak> .................................................. ok
testing:insert-delete> .................................................. ok
testing:insert-union> .................................................. ok
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .................................................. ok
testing:delete-insert> .x failed:
shrinking> if valid (Node [Leaf [], 9, 20, Leaf []]) then equalContents (delete (-3) (insert (-3) (-11) (Node [Leaf [], 9, 20, Leaf []]))) (if -3 == -3 then delete (-3) (Node [Leaf [], 9, 20, Leaf []]) else insert (-3) (-11) (delete (-3) (Node [Leaf [], 9, 20, Leaf []]))) else True
after 418 tests.
testing:delete-delete> .................................................. ok
testing:delete-union> .x failed:
shrinking> if and (valid (Node [Leaf [], -4, -24, Node [Leaf [], 17, 1, Leaf []]])) (valid (Leaf [])) then equalContents (delete (17) (union (Node [Leaf [], -4, -24, Node [Leaf [], 17, 1, Leaf []]]) (Leaf []))) (union (delete (17) (Node [Leaf [], -4, -24, Node [Leaf [], 17, 1, Leaf []]])) (delete (17) (Leaf []))) else True
after 738 tests.
testing:union-nil-1> .................................................. ok
testing:union-nil-2> .x failed:
shrinking> if valid (Node [Node [Node [Leaf [], -27, 27, Leaf []], -17, -22, Leaf []], 11, 10, Leaf []]) then union (Node [Node [Node [Leaf [], -27, 27, Leaf []], -17, -22, Leaf []], 11, 10, Leaf []]) (nil) == Node [Node [Node [Leaf [], -27, 27, Leaf []], -17, -22, Leaf []], 11, 10, Leaf []] else True
after 3 tests.
testing:union-delete-insert> .x failed:
shrinking> if and (valid (Node [Leaf [], -9, -3, Node [Leaf [], -4, -15, Leaf []]])) (valid (Node [Leaf [], -18, 25, Node [Node [Leaf [], -11, -2, Leaf []], 1, -26, Node [Leaf [], 6, -5, Leaf []]]])) then equalContents (union (delete (-4) (Node [Leaf [], -9, -3, Node [Leaf [], -4, -15, Leaf []]])) (insert (-4) (0) (Node [Leaf [], -18, 25, Node [Node [Leaf [], -11, -2, Leaf []], 1, -26, Node [Leaf [], 6, -5, Leaf []]]]))) (insert (-4) (0) (union (Node [Leaf [], -9, -3, Node [Leaf [], -4, -15, Leaf []]]) (Node [Leaf [], -18, 25, Node [Node [Leaf [], -11, -2, Leaf []], 1, -26, Node [Leaf [], 6, -5, Leaf []]]]))) else True
after 7 tests.
testing:union-union-idem> .x failed:
shrinking> if valid (Node [Leaf [], -17, -26, Node [Node [Leaf [], 12, 15, Leaf []], 24, -28, Leaf []]]) then equalContents (union (Node [Leaf [], -17, -26, Node [Node [Leaf [], 12, 15, Leaf []], 24, -28, Leaf []]]) (Node [Leaf [], -17, -26, Node [Node [Leaf [], 12, 15, Leaf []], 24, -28, Leaf []]])) (Node [Leaf [], -17, -26, Node [Node [Leaf [], 12, 15, Leaf []], 24, -28, Leaf []]]) else True
after 29 tests.
testing:union-union-assoc> .................................................. ok
testing:find-nil> .................................................. ok
testing:find-insert> .x failed:
shrinking> if valid (Node [Leaf [], -29, -16, Leaf []]) then find (-29) (insert (24) (15) (Node [Leaf [], -29, -16, Leaf []])) == if -29 == 24 then Just [15] else find (-29) (Node [Leaf [], -29, -16, Leaf []]) else True
after 35 tests.
testing:find-delete> ........................x failed:
shrinking> if valid (Node [Node [Node [Leaf [], -5, 24, Leaf []], 12, -9, Leaf []], 28, -4, Leaf []]) then find (12) (delete (28) (Node [Node [Node [Leaf [], -5, 24, Leaf []], 12, -9, Leaf []], 28, -4, Leaf []])) == if 12 == 28 then Nothing [] else find (12) (Node [Node [Node [Leaf [], -5, 24, Leaf []], 12, -9, Leaf []], 28, -4, Leaf []]) else True
after 47662 tests.
testing:find-union> .x failed:
shrinking> if and (valid (Node [Node [Node [Leaf [], -24, -6, Leaf []], -14, -6, Leaf []], -10, -16, Node [Leaf [], -1, -1, Leaf []]])) (valid (Leaf [])) then find (-14) (union (Node [Node [Node [Leaf [], -24, -6, Leaf []], -14, -6, Leaf []], -10, -16, Node [Leaf [], -1, -1, Leaf []]]) (Leaf [])) == case find (-14) (Node [Node [Node [Leaf [], -24, -6, Leaf []], -14, -6, Leaf []], -10, -16, Node [Leaf [], -1, -1, Leaf []]]) of
  ; Nothing [] -> find (-14) (Leaf [])
  ; Just [v] -> Just [v] else True
after 378 tests.
testing:union-nil> .................................................. ok
testing:union-insert> .................................................. ok
testing:insert-complete> x failed:
shrinking> if valid (Node [Leaf [], -14, 10, Node [Leaf [], -10, -10, Leaf []]]) then Node [Leaf [], -14, 10, Node [Leaf [], -10, -10, Leaf []]] == foldl (flip2 (uncurry (insert))) (nil) (insertions (Node [Leaf [], -14, 10, Node [Leaf [], -10, -10, Leaf []]])) else True
after 0 tests.
testing:insert-complete-for-delete> .x failed:
shrinking> if valid (Node [Node [Leaf [], -13, -3, Leaf []], -2, 16, Node [Leaf [], 8, -26, Leaf []]]) then delete (1) (Node [Node [Leaf [], -13, -3, Leaf []], -2, 16, Node [Leaf [], 8, -26, Leaf []]]) == foldl (flip2 (uncurry (insert))) (nil) (insertions (delete (1) (Node [Node [Leaf [], -13, -3, Leaf []], -2, 16, Node [Leaf [], 8, -26, Leaf []]]))) else True
after 35 tests.
testing:insert-complete-for-union> .x failed:
shrinking> if and (valid (Leaf [])) (valid (Node [Leaf [], -9, 12, Node [Leaf [], 24, -15, Leaf []]])) then union (Leaf []) (Node [Leaf [], -9, 12, Node [Leaf [], 24, -15, Leaf []]]) == foldl (flip2 (uncurry (insert))) (nil) (insertions (union (Leaf []) (Node [Leaf [], -9, 12, Node [Leaf [], 24, -15, Leaf []]]))) else True
after 35 tests.
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> x failed:
shrinking> case equivs (Cons [IIP [3, -30], Cons [IIP [11, 3], Cons [IIP [8, -21], Cons [IIP [11, -21], Empty []]]]]) of
  ; BBP [fstt, sndt] -> equalContents (delete (11) (fstt)) (delete (11) (sndt))
after 0 tests.
testing:union-preserves-equiv> .x failed:
shrinking> case equivs (Cons [IIP [-3, -25], Cons [IIP [6, 4], Cons [IIP [-16, -30], Cons [IIP [-2, 15], Empty []]]]]) of
  ; BBP [fstt, sndt] -> equalContents (union (fstt) (sndt)) (union (sndt) (fstt))
after 2 tests.
testing:find-preserves-equiv> .x failed:
shrinking> case equivs (Cons [IIP [0, 12], Cons [IIP [-9, -10], Cons [IIP [-19, 20], Empty []]]]) of
  ; BBP [fstt, sndt] -> find (-9) (fstt) == find (-9) (sndt)
after 25 tests.
testing:equivs> .x failed:
shrinking> case equivs (Cons [IIP [-29, 3], Cons [IIP [12, 1], Empty []]]) of
  ; BBP [fstt, sndt] -> equalContents (fstt) (sndt)
after 1 tests.
BST-bug-2.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .x failed:
shrinking> if valid (Node [Leaf [], 13, 22, Leaf []]) then valid (insert (13) (-6) (Node [Leaf [], 13, 22, Leaf []])) else True
after 232 tests.
testing:delete-valid> .................................................. ok
testing:union-valid> .x failed:
shrinking> if and (valid (Node [Node [Leaf [], -15, 24, Node [Leaf [], -1, -5, Leaf []]], 13, 21, Leaf []])) (valid (Node [Node [Leaf [], -27, -17, Leaf []], 13, 28, Leaf []])) then valid (union (Node [Node [Leaf [], -15, 24, Node [Leaf [], -1, -5, Leaf []]], 13, 21, Leaf []]) (Node [Node [Leaf [], -27, -17, Leaf []], 13, 28, Leaf []])) else True
after 269 tests.
testing:nil-model> .................................................. ok
testing:insert-model> .x failed:
shrinking> if valid (Node [Leaf [], 8, 29, Leaf []]) then toList (insert (8) (7) (Node [Leaf [], 8, 29, Leaf []])) == listInsert (IIP [8, 7]) (deleteKey (8) (toList (Node [Leaf [], 8, 29, Leaf []]))) else True
after 191 tests.
testing:delete-model> .................................................. ok
testing:find-model> .................................................. ok
testing:insert-post> ............x failed:
shrinking> if valid (Node [Leaf [], 8, -11, Leaf []]) then find (8) (insert (8) (-23) (Node [Leaf [], 8, -11, Leaf []])) == if 8 == 8 then Just [-23] else find (8) (Node [Leaf [], 8, -11, Leaf []]) else True
after 22395 tests.
testing:insert-post-same-key> .x failed:
shrinking> if valid (Node [Leaf [], -5, -9, Leaf []]) then find (-5) (insert (-5) (-23) (Node [Leaf [], -5, -9, Leaf []])) == if -5 == -5 then Just [-23] else find (-5) (Node [Leaf [], -5, -9, Leaf []]) else True
after 187 tests.
testing:union-post> .................................................. ok
testing:find-post-present> .x failed:
shrinking> if valid (Node [Node [Node [Leaf [], -29, -29, Leaf []], -12, 20, Node [Leaf [], 3, -12, Leaf []]], 8, -1, Leaf []]) then find (3) (insert (3) (-21) (Node [Node [Node [Leaf [], -29, -29, Leaf []], -12, 20, Node [Leaf [], 3, -12, Leaf []]], 8, -1, Leaf []])) == Just [-21] else True
after 261 tests.
testing:find-post-absent> .................................................. ok
testing:insert-delete-complete> .x failed:
shrinking> if valid (Node [Leaf [], -21, 19, Leaf []]) then case find (-21) (Node [Leaf [], -21, 19, Leaf []]) of
  ; Nothing [] -> Node [Leaf [], -21, 19, Leaf []] == delete (-21) (Node [Leaf [], -21, 19, Leaf []])
  ; Just [v] -> Node [Leaf [], -21, 19, Leaf []] == insert (-21) (v) (Node [Leaf [], -21, 19, Leaf []]) else True
after 20 tests.
testing:insert-insert-weak> .................................................. ok
testing:insert-insert> .x failed:
shrinking> if valid (Leaf []) then equalContents (insert (-20) (-29) (insert (-20) (0) (Leaf []))) (if -20 == -20 then insert (-20) (-29) (Leaf []) else insert (-20) (0) (insert (-20) (-29) (Leaf []))) else True
after 47 tests.
testing:insert-delete-weak> .................................................. ok
testing:insert-delete> .......x failed:
shrinking> if valid (Node [Leaf [], 20, -20, Leaf []]) then equalContents (insert (20) (11) (delete (20) (Node [Leaf [], 20, -20, Leaf []]))) (if 20 == 20 then insert (20) (11) (Node [Leaf [], 20, -20, Leaf []]) else delete (20) (insert (20) (11) (Node [Leaf [], 20, -20, Leaf []]))) else True
after 12970 tests.
testing:insert-union> .................................................. ok
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .................................................. ok
testing:delete-insert> ..............x failed:
shrinking> if valid (Node [Leaf [], 20, 25, Leaf []]) then equalContents (delete (20) (insert (20) (27) (Node [Leaf [], 20, 25, Leaf []]))) (if 20 == 20 then delete (20) (Node [Leaf [], 20, 25, Leaf []]) else insert (20) (27) (delete (20) (Node [Leaf [], 20, 25, Leaf []]))) else True
after 27531 tests.
testing:delete-delete> .................................................. ok
testing:delete-union> ..........x failed:
shrinking> if and (valid (Node [Node [Leaf [], -6, 25, Leaf []], 10, 11, Leaf []])) (valid (Node [Leaf [], -27, -21, Node [Leaf [], 10, 3, Leaf []]])) then equalContents (delete (10) (union (Node [Node [Leaf [], -6, 25, Leaf []], 10, 11, Leaf []]) (Node [Leaf [], -27, -21, Node [Leaf [], 10, 3, Leaf []]]))) (union (delete (10) (Node [Node [Leaf [], -6, 25, Leaf []], 10, 11, Leaf []])) (delete (10) (Node [Leaf [], -27, -21, Node [Leaf [], 10, 3, Leaf []]]))) else True
after 18785 tests.
testing:union-nil-1> .................................................. ok
testing:union-nil-2> .................................................. ok
testing:union-delete-insert> .x failed:
shrinking> if and (valid (Node [Leaf [], 0, 3, Leaf []])) (valid (Node [Leaf [], 23, 23, Leaf []])) then equalContents (union (delete (0) (Node [Leaf [], 0, 3, Leaf []])) (insert (0) (29) (Node [Leaf [], 23, 23, Leaf []]))) (insert (0) (29) (union (Node [Leaf [], 0, 3, Leaf []]) (Node [Leaf [], 23, 23, Leaf []]))) else True
after 128 tests.
testing:union-union-idem> .x failed:
shrinking> if valid (Node [Leaf [], 28, 7, Leaf []]) then equalContents (union (Node [Leaf [], 28, 7, Leaf []]) (Node [Leaf [], 28, 7, Leaf []])) (Node [Leaf [], 28, 7, Leaf []]) else True
after 2 tests.
testing:union-union-assoc> .................................................. ok
testing:find-nil> .................................................. ok
testing:find-insert> .x failed:
shrinking> if valid (Node [Leaf [], -28, -7, Node [Node [Leaf [], -18, 19, Leaf []], -16, 28, Node [Leaf [], -3, 12, Leaf []]]]) then find (-18) (insert (-18) (17) (Node [Leaf [], -28, -7, Node [Node [Leaf [], -18, 19, Leaf []], -16, 28, Node [Leaf [], -3, 12, Leaf []]]])) == if -18 == -18 then Just [17] else find (-18) (Node [Leaf [], -28, -7, Node [Node [Leaf [], -18, 19, Leaf []], -16, 28, Node [Leaf [], -3, 12, Leaf []]]]) else True
after 1479 tests.
testing:find-delete> .................................................. ok
testing:find-union> ...........x failed:
shrinking> if and (valid (Node [Node [Node [Leaf [], 0, -20, Leaf []], 5, -4, Leaf []], 17, 3, Leaf []])) (valid (Node [Leaf [], 17, -14, Leaf []])) then find (17) (union (Node [Node [Node [Leaf [], 0, -20, Leaf []], 5, -4, Leaf []], 17, 3, Leaf []]) (Node [Leaf [], 17, -14, Leaf []])) == case find (17) (Node [Node [Node [Leaf [], 0, -20, Leaf []], 5, -4, Leaf []], 17, 3, Leaf []]) of
  ; Nothing [] -> find (17) (Node [Leaf [], 17, -14, Leaf []])
  ; Just [v] -> Just [v] else True
after 21349 tests.
testing:union-nil> .................................................. ok
testing:union-insert> .................................................. ok
testing:insert-complete> .................................................. ok
testing:insert-complete-for-delete> .................................................. ok
testing:insert-complete-for-union> .................................................. ok
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> .................................................. ok
testing:union-preserves-equiv> .................................................. ok
testing:find-preserves-equiv> .................................................. ok
testing:equivs> .................................................. ok
BST-bug-3.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> .................................................. ok
testing:union-valid> .................................................. ok
testing:nil-model> .................................................. ok
testing:insert-model> .x failed:
shrinking> if valid (Node [Leaf [], 1, -19, Leaf []]) then toList (insert (1) (-16) (Node [Leaf [], 1, -19, Leaf []])) == listInsert (IIP [1, -16]) (deleteKey (1) (toList (Node [Leaf [], 1, -19, Leaf []]))) else True
after 356 tests.
testing:delete-model> .................................................. ok
testing:find-model> .................................................. ok
testing:insert-post> ...x failed:
shrinking> if valid (Node [Leaf [], -13, 12, Node [Leaf [], -2, 11, Node [Leaf [], 26, -5, Leaf []]]]) then find (-13) (insert (-13) (26) (Node [Leaf [], -13, 12, Node [Leaf [], -2, 11, Node [Leaf [], 26, -5, Leaf []]]])) == if -13 == -13 then Just [26] else find (-13) (Node [Leaf [], -13, 12, Node [Leaf [], -2, 11, Node [Leaf [], 26, -5, Leaf []]]]) else True
after 5101 tests.
testing:insert-post-same-key> .x failed:
shrinking> if valid (Node [Leaf [], -28, -14, Node [Leaf [], -10, 10, Node [Leaf [], -2, -28, Leaf []]]]) then find (-2) (insert (-2) (28) (Node [Leaf [], -28, -14, Node [Leaf [], -10, 10, Node [Leaf [], -2, -28, Leaf []]]])) == if -2 == -2 then Just [28] else find (-2) (Node [Leaf [], -28, -14, Node [Leaf [], -10, 10, Node [Leaf [], -2, -28, Leaf []]]]) else True
after 727 tests.
testing:union-post> .........................x failed:
shrinking> if and (valid (Node [Leaf [], -15, -5, Leaf []])) (valid (Node [Leaf [], -15, -13, Leaf []])) then find (-15) (union (Node [Leaf [], -15, -5, Leaf []]) (Node [Leaf [], -15, -13, Leaf []])) == case find (-15) (Node [Leaf [], -15, -5, Leaf []]) of
  ; Just [v] -> Just [v]
  ; Nothing [] -> case find (-15) (Node [Leaf [], -15, -13, Leaf []]) of
  ; Just [v1] -> Just [v1]
  ; Nothing [] -> Nothing [] else True
after 49915 tests.
testing:find-post-present> .x failed:
shrinking> if valid (Node [Leaf [], -10, 30, Leaf []]) then find (-10) (insert (-10) (29) (Node [Leaf [], -10, 30, Leaf []])) == Just [29] else True
after 109 tests.
testing:find-post-absent> .................................................. ok
testing:insert-delete-complete> .................................................. ok
testing:insert-insert-weak> .................................................. ok
testing:insert-insert> .x failed:
shrinking> if valid (Leaf []) then equalContents (insert (9) (-9) (insert (9) (-21) (Leaf []))) (if 9 == 9 then insert (9) (-9) (Leaf []) else insert (9) (-21) (insert (9) (-9) (Leaf []))) else True
after 13 tests.
testing:insert-delete-weak> .................................................. ok
testing:insert-delete> ....x failed:
shrinking> if valid (Node [Node [Node [Leaf [], -15, -22, Leaf []], -2, -3, Leaf []], 13, -18, Leaf []]) then equalContents (insert (13) (17) (delete (13) (Node [Node [Node [Leaf [], -15, -22, Leaf []], -2, -3, Leaf []], 13, -18, Leaf []]))) (if 13 == 13 then insert (13) (17) (Node [Node [Node [Leaf [], -15, -22, Leaf []], -2, -3, Leaf []], 13, -18, Leaf []]) else delete (13) (insert (13) (17) (Node [Node [Node [Leaf [], -15, -22, Leaf []], -2, -3, Leaf []], 13, -18, Leaf []]))) else True
after 7481 tests.
testing:insert-union> .................................................. ok
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .................................................. ok
testing:delete-insert> .................................................. ok
testing:delete-delete> .................................................. ok
testing:delete-union> .................................................. ok
testing:union-nil-1> .................................................. ok
testing:union-nil-2> .................................................. ok
testing:union-delete-insert> .x failed:
shrinking> if and (valid (Node [Leaf [], -30, 17, Node [Leaf [], -10, -25, Node [Leaf [], -6, 22, Leaf []]]])) (valid (Leaf [])) then equalContents (union (delete (-30) (Node [Leaf [], -30, 17, Node [Leaf [], -10, -25, Node [Leaf [], -6, 22, Leaf []]]])) (insert (-30) (-22) (Leaf []))) (insert (-30) (-22) (union (Node [Leaf [], -30, 17, Node [Leaf [], -10, -25, Node [Leaf [], -6, 22, Leaf []]]]) (Leaf []))) else True
after 201 tests.
testing:union-union-idem> .................................................. ok
testing:union-union-assoc> .................................................. ok
testing:find-nil> .................................................. ok
testing:find-insert> ......x failed:
shrinking> if valid (Node [Leaf [], -16, -23, Leaf []]) then find (-16) (insert (-16) (-18) (Node [Leaf [], -16, -23, Leaf []])) == if -16 == -16 then Just [-18] else find (-16) (Node [Leaf [], -16, -23, Leaf []]) else True
after 10921 tests.
testing:find-delete> .................................................. ok
testing:find-union> ............x failed:
shrinking> if and (valid (Node [Leaf [], 5, -4, Leaf []])) (valid (Node [Leaf [], 5, -7, Leaf []])) then find (5) (union (Node [Leaf [], 5, -4, Leaf []]) (Node [Leaf [], 5, -7, Leaf []])) == case find (5) (Node [Leaf [], 5, -4, Leaf []]) of
  ; Nothing [] -> find (5) (Node [Leaf [], 5, -7, Leaf []])
  ; Just [v] -> Just [v] else True
after 22996 tests.
testing:union-nil> .................................................. ok
testing:union-insert> .................................................. ok
testing:insert-complete> .................................................. ok
testing:insert-complete-for-delete> .................................................. ok
testing:insert-complete-for-union> .................................................. ok
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> .................................................. ok
testing:union-preserves-equiv> .................................................. ok
testing:find-preserves-equiv> .................................................. ok
testing:equivs> .................................................. ok
BST-bug-4.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> .................................................. ok
testing:union-valid> .BST-bug-5.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> .................................................. ok
testing:union-valid> .................................................. ok
testing:nil-model> .................................................. ok
testing:insert-model> .................................................. ok
testing:delete-model> .x failed:
shrinking> if valid (Node [Node [Leaf [], -7, -18, Leaf []], 9, -24, Leaf []]) then toList (delete (-7) (Node [Node [Leaf [], -7, -18, Leaf []], 9, -24, Leaf []])) == deleteKey (-7) (toList (Node [Node [Leaf [], -7, -18, Leaf []], 9, -24, Leaf []])) else True
after 327 tests.
testing:find-model> .................................................. ok
testing:insert-post> .................................................. ok
testing:insert-post-same-key> .................................................. ok
testing:union-post> .................................................. ok
testing:find-post-present> .................................................. ok
testing:find-post-absent> ..x failed:
shrinking> if valid (Node [Node [Leaf [], -14, -28, Node [Leaf [], 6, -9, Leaf []]], 14, 1, Leaf []]) then find (6) (delete (6) (Node [Node [Leaf [], -14, -28, Node [Leaf [], 6, -9, Leaf []]], 14, 1, Leaf []])) == Nothing [] else True
after 3250 tests.
testing:insert-delete-complete> .................................................. ok
testing:insert-insert-weak> .................................................. ok
testing:insert-insert> .................................................. ok
testing:insert-delete-weak> .................................................. ok
testing:insert-delete> .................................................. ok
testing:insert-union> .................................................. ok
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .................................................. ok
testing:delete-insert> .x failed:
shrinking> if valid (Node [Leaf [], -5, -22, Leaf []]) then equalContents (delete (24) (insert (24) (11) (Node [Leaf [], -5, -22, Leaf []]))) (if 24 == 24 then delete (24) (Node [Leaf [], -5, -22, Leaf []]) else insert (24) (11) (delete (24) (Node [Leaf [], -5, -22, Leaf []]))) else True
after 406 tests.
testing:delete-delete> ..................................x failed:
shrinking> if valid (Node [Node [Leaf [], -30, 23, Node [Leaf [], 7, -26, Leaf []]], 11, -8, Node [Leaf [], 19, 22, Leaf []]]) then equalContents (delete (11) (delete (19) (Node [Node [Leaf [], -30, 23, Node [Leaf [], 7, -26, Leaf []]], 11, -8, Node [Leaf [], 19, 22, Leaf []]]))) (delete (19) (delete (11) (Node [Node [Leaf [], -30, 23, Node [Leaf [], 7, -26, Leaf []]], 11, -8, Node [Leaf [], 19, 22, Leaf []]]))) else True
after 67937 tests.
testing:delete-union> ...x failed:
shrinking> if and (valid (Node [Node [Leaf [], -30, 9, Node [Leaf [], -25, 18, Leaf []]], 3, -10, Leaf []])) (valid (Node [Leaf [], -5, -3, Leaf []])) then equalContents (delete (3) (union (Node [Node [Leaf [], -30, 9, Node [Leaf [], -25, 18, Leaf []]], 3, -10, Leaf []]) (Node [Leaf [], -5, -3, Leaf []]))) (union (delete (3) (Node [Node [Leaf [], -30, 9, Node [Leaf [], -25, 18, Leaf []]], 3, -10, Leaf []])) (delete (3) (Node [Leaf [], -5, -3, Leaf []]))) else True
after 5152 tests.
testing:union-nil-1> .................................................. ok
testing:union-nil-2> .................................................. ok
testing:union-delete-insert> .x failed:
shrinking> if and (valid (Node [Node [Node [Leaf [], -26, 0, Leaf []], -3, 3, Leaf []], 7, 23, Leaf []])) (valid (Node [Node [Leaf [], -15, 28, Leaf []], -6, -25, Leaf []])) then equalContents (union (delete (-3) (Node [Node [Node [Leaf [], -26, 0, Leaf []], -3, 3, Leaf []], 7, 23, Leaf []])) (insert (-3) (-13) (Node [Node [Leaf [], -15, 28, Leaf []], -6, -25, Leaf []]))) (insert (-3) (-13) (union (Node [Node [Node [Leaf [], -26, 0, Leaf []], -3, 3, Leaf []], 7, 23, Leaf []]) (Node [Node [Leaf [], -15, 28, Leaf []], -6, -25, Leaf []]))) else True
after 525 tests.
testing:union-union-idem> .................................................. ok
testing:union-union-assoc> .................................................. ok
testing:find-nil> .................................................. ok
testing:find-insert> .................................................. ok
testing:find-delete> .................................................. ok
testing:find-union> .................................................. ok
testing:union-nil> .................................................. ok
testing:union-insert> .................................................. ok
testing:insert-complete> .................................................. ok
testing:insert-complete-for-delete> .................................................. ok
testing:insert-complete-for-union> .................................................. ok
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> .x failed:
shrinking> case equivs (Cons [IIP [-10, 1], Cons [IIP [-7, -20], Cons [IIP [-10, 12], Cons [IIP [6, 6], Cons [IIP [20, -3], Empty []]]]]]) of
  ; BBP [fstt, sndt] -> equalContents (delete (20) (fstt)) (delete (20) (sndt))
after 18 tests.
testing:union-preserves-equiv> .................................................. ok
testing:find-preserves-equiv> .................................................. ok
testing:equivs> .................................................. ok
BST-bug-6.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> .................................................. ok
testing:union-valid> .x failed:
shrinking> if and (valid (Node [Leaf [], -10, -7, Node [Node [Leaf [], 23, 21, Leaf []], 26, 13, Leaf []]])) (valid (Node [Leaf [], -27, 15, Leaf []])) then valid (union (Node [Leaf [], -10, -7, Node [Node [Leaf [], 23, 21, Leaf []], 26, 13, Leaf []]]) (Node [Leaf [], -27, 15, Leaf []])) else True
after 64 tests.
testing:nil-model> .................................................. ok
testing:insert-model> .................................................. ok
testing:delete-model> .................................................. ok
testing:find-model> .................................................. ok
testing:insert-post> .................................................. ok
testing:insert-post-same-key> .................................................. ok
testing:union-post> .x failed:
shrinking> if and (valid (Node [Leaf [], 17, 30, Leaf []])) (valid (Node [Leaf [], 2, -14, Leaf []])) then find (2) (union (Node [Leaf [], 17, 30, Leaf []]) (Node [Leaf [], 2, -14, Leaf []])) == case find (2) (Node [Leaf [], 17, 30, Leaf []]) of
  ; Just [v] -> Just [v]
  ; Nothing [] -> case find (2) (Node [Leaf [], 2, -14, Leaf []]) of
  ; Just [v1] -> Just [v1]
  ; Nothing [] -> Nothing [] else True
after 1541 tests.
testing:find-post-present> .................................................. ok
testing:find-post-absent> .................................................. ok
testing:insert-delete-complete> .................................................. ok
testing:insert-insert-weak> .................................................. ok
testing:insert-insert> .................................................. ok
testing:insert-delete-weak> .................................................. ok
testing:insert-delete> .................................................. ok
testing:insert-union> .x failed:
shrinking> if and (valid (Leaf [])) (valid (Node [Leaf [], -25, 29, Node [Leaf [], -13, 30, Leaf []]])) then equalContents (insert (-18) (30) (union (Leaf []) (Node [Leaf [], -25, 29, Node [Leaf [], -13, 30, Leaf []]]))) (union (insert (-18) (30) (Leaf [])) (Node [Leaf [], -25, 29, Node [Leaf [], -13, 30, Leaf []]])) else True
after 1 tests.
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .................................................. ok
testing:delete-insert> .................................................. ok
testing:delete-delete> .................................................. ok
testing:delete-union> .x failed:
shrinking> if and (valid (Node [Leaf [], -30, -27, Node [Leaf [], 2, -27, Leaf []]])) (valid (Node [Leaf [], -25, 18, Node [Leaf [], -11, -28, Node [Leaf [], 30, -28, Leaf []]]])) then equalContents (delete (-11) (union (Node [Leaf [], -30, -27, Node [Leaf [], 2, -27, Leaf []]]) (Node [Leaf [], -25, 18, Node [Leaf [], -11, -28, Node [Leaf [], 30, -28, Leaf []]]]))) (union (delete (-11) (Node [Leaf [], -30, -27, Node [Leaf [], 2, -27, Leaf []]])) (delete (-11) (Node [Leaf [], -25, 18, Node [Leaf [], -11, -28, Node [Leaf [], 30, -28, Leaf []]]]))) else True
after 1535 tests.
testing:union-nil-1> .................................................. ok
testing:union-nil-2> .................................................. ok
testing:union-delete-insert> .x failed:
shrinking> if and (valid (Node [Leaf [], 28, 13, Leaf []])) (valid (Leaf [])) then equalContents (union (delete (4) (Node [Leaf [], 28, 13, Leaf []])) (insert (4) (-30) (Leaf []))) (insert (4) (-30) (union (Node [Leaf [], 28, 13, Leaf []]) (Leaf []))) else True
after 22 tests.
testing:union-union-idem> .x failed:
shrinking> if valid (Node [Leaf [], -9, 17, Node [Leaf [], 12, -18, Leaf []]]) then equalContents (union (Node [Leaf [], -9, 17, Node [Leaf [], 12, -18, Leaf []]]) (Node [Leaf [], -9, 17, Node [Leaf [], 12, -18, Leaf []]])) (Node [Leaf [], -9, 17, Node [Leaf [], 12, -18, Leaf []]]) else True
after 20 tests.
testing:union-union-assoc> .................................................. ok
testing:find-nil> .................................................. ok
testing:find-insert> .................................................. ok
testing:find-delete> .................................................. ok
testing:find-union> ..x failed:
shrinking> if and (valid (Node [Node [Leaf [], -18, 2, Node [Leaf [], 5, 24, Leaf []]], 14, 27, Leaf []])) (valid (Node [Leaf [], 11, 18, Leaf []])) then find (11) (union (Node [Node [Leaf [], -18, 2, Node [Leaf [], 5, 24, Leaf []]], 14, 27, Leaf []]) (Node [Leaf [], 11, 18, Leaf []])) == case find (11) (Node [Node [Leaf [], -18, 2, Node [Leaf [], 5, 24, Leaf []]], 14, 27, Leaf []]) of
  ; Nothing [] -> find (11) (Node [Leaf [], 11, 18, Leaf []])
  ; Just [v] -> Just [v] else True
after 2456 tests.
testing:union-nil> .................................................. ok
testing:union-insert> .x failed:
shrinking> if and (valid (Node [Leaf [], -15, -28, Leaf []])) (valid (Node [Leaf [], -29, -1, Leaf []])) then equalContents (union (insert (13) (-21) (Node [Leaf [], -15, -28, Leaf []])) (Node [Leaf [], -29, -1, Leaf []])) (insert (13) (-21) (union (Node [Leaf [], -15, -28, Leaf []]) (Node [Leaf [], -29, -1, Leaf []]))) else True
after 13 tests.
testing:insert-complete> .................................................. ok
testing:insert-complete-for-delete> .................................................. ok
testing:insert-complete-for-union> .x failed:
shrinking> if and (valid (Node [Leaf [], 27, 9, Leaf []])) (valid (Node [Node [Leaf [], -18, -10, Node [Leaf [], 1, 5, Leaf []]], 28, -26, Leaf []])) then union (Node [Leaf [], 27, 9, Leaf []]) (Node [Node [Leaf [], -18, -10, Node [Leaf [], 1, 5, Leaf []]], 28, -26, Leaf []]) == foldl (flip2 (uncurry (insert))) (nil) (insertions (union (Node [Leaf [], 27, 9, Leaf []]) (Node [Node [Leaf [], -18, -10, Node [Leaf [], 1, 5, Leaf []]], 28, -26, Leaf []]))) else True
after 6 tests.
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> .................................................. ok
testing:union-preserves-equiv> .................................................. ok
testing:find-preserves-equiv> .................................................. ok
testing:equivs> .................................................. ok
BST-bug-7.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> ........................x failed:
shrinking> if valid (Node [Node [Leaf [], -30, -16, Node [Leaf [], 0, 26, Leaf []]], 6, -27, Node [Leaf [], 12, 23, Leaf []]]) then valid (delete (6) (Node [Node [Leaf [], -30, -16, Node [Leaf [], 0, 26, Leaf []]], 6, -27, Node [Leaf [], 12, 23, Leaf []]])) else True
after 46919 tests.
testing:union-valid> .x failed:
shrinking> if and (valid (Node [Node [Leaf [], -28, -28, Leaf []], -15, 15, Node [Leaf [], 3, 15, Node [Leaf [], 30, 7, Leaf []]]])) (valid (Node [Leaf [], -8, -14, Leaf []])) then valid (union (Node [Node [Leaf [], -28, -28, Leaf []], -15, 15, Node [Leaf [], 3, 15, Node [Leaf [], 30, 7, Leaf []]]]) (Node [Leaf [], -8, -14, Leaf []])) else True
after 712 tests.
testing:nil-model> .................................................. ok
testing:insert-model> .................................................. ok
testing:delete-model> .x failed:
shrinking> if valid (Node [Node [Node [Leaf [], -18, 23, Leaf []], -14, 19, Leaf []], 17, -23, Leaf []]) then toList (delete (17) (Node [Node [Node [Leaf [], -18, 23, Leaf []], -14, 19, Leaf []], 17, -23, Leaf []])) == deleteKey (17) (toList (Node [Node [Node [Leaf [], -18, 23, Leaf []], -14, 19, Leaf []], 17, -23, Leaf []])) else True
after 742 tests.
testing:find-model> .................................................. ok
testing:insert-post> .................................................. ok
testing:insert-post-same-key> .................................................. ok
testing:union-post> .x failed:
shrinking> if and (valid (Node [Leaf [], -27, -5, Leaf []])) (valid (Leaf [])) then find (-27) (union (Node [Leaf [], -27, -5, Leaf []]) (Leaf [])) == case find (-27) (Node [Leaf [], -27, -5, Leaf []]) of
  ; Just [v] -> Just [v]
  ; Nothing [] -> case find (-27) (Leaf []) of
  ; Just [v1] -> Just [v1]
  ; Nothing [] -> Nothing [] else True
after 1121 tests.
testing:find-post-present> .................................................. ok
testing:find-post-absent> .................................................. ok
testing:insert-delete-complete> .................................................. ok
testing:insert-insert-weak> .................................................. ok
testing:insert-insert> .................................................. ok
testing:insert-delete-weak> .x failed:
shrinking> if and (valid (Node [Leaf [], 2, -23, Leaf []])) (not (-3 == 2)) then equalContents (insert (-3) (16) (delete (2) (Node [Leaf [], 2, -23, Leaf []]))) (delete (2) (insert (-3) (16) (Node [Leaf [], 2, -23, Leaf []]))) else True
after 481 tests.
testing:insert-delete> .x failed:
shrinking> if valid (Node [Leaf [], 13, 23, Leaf []]) then equalContents (insert (-8) (-6) (delete (13) (Node [Leaf [], 13, 23, Leaf []]))) (if -8 == 13 then insert (-8) (-6) (Node [Leaf [], 13, 23, Leaf []]) else delete (13) (insert (-8) (-6) (Node [Leaf [], 13, 23, Leaf []]))) else True
after 54 tests.
testing:insert-union> x failed:
shrinking> if and (valid (Leaf [])) (valid (Leaf [])) then equalContents (insert (-20) (-23) (union (Leaf []) (Leaf []))) (union (insert (-20) (-23) (Leaf [])) (Leaf [])) else True
after 0 tests.
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .x failed:
shrinking> if and (valid (Node [Leaf [], 25, -9, Leaf []])) (not (25 == 1)) then equalContents (delete (25) (insert (1) (-9) (Node [Leaf [], 25, -9, Leaf []]))) (insert (1) (-9) (delete (25) (Node [Leaf [], 25, -9, Leaf []]))) else True
after 975 tests.
testing:delete-insert> .x failed:
shrinking> if valid (Node [Leaf [], 11, -30, Leaf []]) then equalContents (delete (11) (insert (-9) (-24) (Node [Leaf [], 11, -30, Leaf []]))) (if 11 == -9 then delete (11) (Node [Leaf [], 11, -30, Leaf []]) else insert (-9) (-24) (delete (11) (Node [Leaf [], 11, -30, Leaf []]))) else True
after 13 tests.
testing:delete-delete> .................................................. ok
testing:delete-union> ..x failed:
shrinking> if and (valid (Node [Leaf [], 24, 0, Leaf []])) (valid (Node [Leaf [], -7, -6, Leaf []])) then equalContents (delete (-7) (union (Node [Leaf [], 24, 0, Leaf []]) (Node [Leaf [], -7, -6, Leaf []]))) (union (delete (-7) (Node [Leaf [], 24, 0, Leaf []])) (delete (-7) (Node [Leaf [], -7, -6, Leaf []]))) else True
after 3634 tests.
testing:union-nil-1> .................................................. ok
testing:union-nil-2> x failed:
shrinking> if valid (Node [Node [Leaf [], -18, -18, Leaf []], 18, -15, Leaf []]) then union (Node [Node [Leaf [], -18, -18, Leaf []], 18, -15, Leaf []]) (nil) == Node [Node [Leaf [], -18, -18, Leaf []], 18, -15, Leaf []] else True
after 0 tests.
testing:union-delete-insert> .x failed:
shrinking> if and (valid (Node [Leaf [], 30, -22, Leaf []])) (valid (Leaf [])) then equalContents (union (delete (-9) (Node [Leaf [], 30, -22, Leaf []])) (insert (-9) (2) (Leaf []))) (insert (-9) (2) (union (Node [Leaf [], 30, -22, Leaf []]) (Leaf []))) else True
after 13 tests.
testing:union-union-idem> .x failed:
shrinking> if valid (Node [Node [Leaf [], -25, 25, Node [Leaf [], -16, -1, Leaf []]], -3, -5, Node [Leaf [], 24, -15, Leaf []]]) then equalContents (union (Node [Node [Leaf [], -25, 25, Node [Leaf [], -16, -1, Leaf []]], -3, -5, Node [Leaf [], 24, -15, Leaf []]]) (Node [Node [Leaf [], -25, 25, Node [Leaf [], -16, -1, Leaf []]], -3, -5, Node [Leaf [], 24, -15, Leaf []]])) (Node [Node [Leaf [], -25, 25, Node [Leaf [], -16, -1, Leaf []]], -3, -5, Node [Leaf [], 24, -15, Leaf []]]) else True
after 597 tests.
testing:union-union-assoc> .x failed:
shrinking> if and (and (valid (Node [Leaf [], 29, -8, Leaf []])) (valid (Leaf []))) (valid (Node [Node [Leaf [], -12, -15, Leaf []], 23, 14, Leaf []])) then equalContents (union (union (Node [Leaf [], 29, -8, Leaf []]) (Leaf [])) (Node [Node [Leaf [], -12, -15, Leaf []], 23, 14, Leaf []])) (union (Node [Leaf [], 29, -8, Leaf []]) (union (Leaf []) (Node [Node [Leaf [], -12, -15, Leaf []], 23, 14, Leaf []]))) else True
after 7 tests.
testing:find-nil> .................................................. ok
testing:find-insert> .................................................. ok
testing:find-delete> ..............x failed:
shrinking> if valid (Node [Node [Node [Leaf [], -4, -2, Leaf []], 3, -8, Leaf []], 21, 25, Leaf []]) then find (-4) (delete (21) (Node [Node [Node [Leaf [], -4, -2, Leaf []], 3, -8, Leaf []], 21, 25, Leaf []])) == if -4 == 21 then Nothing [] else find (-4) (Node [Node [Node [Leaf [], -4, -2, Leaf []], 3, -8, Leaf []], 21, 25, Leaf []]) else True
after 27699 tests.
testing:find-union> .x failed:
shrinking> if and (valid (Node [Leaf [], 17, 7, Leaf []])) (valid (Leaf [])) then find (17) (union (Node [Leaf [], 17, 7, Leaf []]) (Leaf [])) == case find (17) (Node [Leaf [], 17, 7, Leaf []]) of
  ; Nothing [] -> find (17) (Leaf [])
  ; Just [v] -> Just [v] else True
after 22 tests.
testing:union-nil> .................................................. ok
testing:union-insert> x failed:
shrinking> if and (valid (Node [Leaf [], -25, 11, Leaf []])) (valid (Leaf [])) then equalContents (union (insert (25) (-3) (Node [Leaf [], -25, 11, Leaf []])) (Leaf [])) (insert (25) (-3) (union (Node [Leaf [], -25, 11, Leaf []]) (Leaf []))) else True
after 0 tests.
testing:insert-complete> .................................................. ok
testing:insert-complete-for-delete> .................................................. ok
testing:insert-complete-for-union> .x failed:
shrinking> if and (valid (Node [Leaf [], -17, -10, Node [Leaf [], 15, 3, Leaf []]])) (valid (Node [Leaf [], 23, 5, Leaf []])) then union (Node [Leaf [], -17, -10, Node [Leaf [], 15, 3, Leaf []]]) (Node [Leaf [], 23, 5, Leaf []]) == foldl (flip2 (uncurry (insert))) (nil) (insertions (union (Node [Leaf [], -17, -10, Node [Leaf [], 15, 3, Leaf []]]) (Node [Leaf [], 23, 5, Leaf []]))) else True
after 79 tests.
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> .x failed:
shrinking> case equivs (Cons [IIP [21, -23], Cons [IIP [12, -2], Cons [IIP [11, -4], Empty []]]]) of
  ; BBP [fstt, sndt] -> equalContents (delete (21) (fstt)) (delete (21) (sndt))
after 145 tests.
testing:union-preserves-equiv> .x failed:
shrinking> case equivs (Cons [IIP [2, 24], Cons [IIP [30, -9], Empty []]]) of
  ; BBP [fstt, sndt] -> equalContents (union (fstt) (sndt)) (union (sndt) (fstt))
after 12 tests.
testing:find-preserves-equiv> .................................................. ok
testing:equivs> .................................................. ok
BST-bug-8.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> .................................................. ok
testing:union-valid> .................................................. ok
testing:nil-model> .................................................. ok
testing:insert-model> .................................................. ok
testing:delete-model> .................................................. ok
testing:find-model> .................................................. ok
testing:insert-post> .................................................. ok
testing:insert-post-same-key> .................................................. ok
testing:union-post> ........x failed:
shrinking> if and (valid (Node [Leaf [], -21, -28, Leaf []])) (valid (Node [Node [Node [Leaf [], -27, -6, Leaf []], -21, 15, Leaf []], 1, -23, Leaf []])) then find (-21) (union (Node [Leaf [], -21, -28, Leaf []]) (Node [Node [Node [Leaf [], -27, -6, Leaf []], -21, 15, Leaf []], 1, -23, Leaf []])) == case find (-21) (Node [Leaf [], -21, -28, Leaf []]) of
  ; Just [v] -> Just [v]
  ; Nothing [] -> case find (-21) (Node [Node [Node [Leaf [], -27, -6, Leaf []], -21, 15, Leaf []], 1, -23, Leaf []]) of
  ; Just [v1] -> Just [v1]
  ; Nothing [] -> Nothing [] else True
after 14618 tests.
testing:find-post-present> .................................................. ok
testing:find-post-absent> .................................................. ok
testing:insert-delete-complete> .................................................. ok
testing:insert-insert-weak> .................................................. ok
testing:insert-insert> .................................................. ok
testing:insert-delete-weak> .................................................. ok
testing:insert-delete> .................................................. ok
testing:insert-union> x failed:
shrinking> if and (valid (Leaf [])) (valid (Node [Node [Leaf [], 7, 17, Leaf []], 15, -7, Leaf []])) then equalContents (insert (7) (-23) (union (Leaf []) (Node [Node [Leaf [], 7, 17, Leaf []], 15, -7, Leaf []]))) (union (insert (7) (-23) (Leaf [])) (Node [Node [Leaf [], 7, 17, Leaf []], 15, -7, Leaf []])) else True
after 0 tests.
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .................................................. ok
testing:delete-insert> .................................................. ok
testing:delete-delete> .................................................. ok
testing:delete-union> .................................................. ok
testing:union-nil-1> .................................................. ok
testing:union-nil-2> .................................................. ok
testing:union-delete-insert> .................................................. ok
testing:union-union-idem> .................................................. ok
testing:union-union-assoc> .................................................. ok
testing:find-nil> .................................................. ok
testing:find-insert> .................................................. ok
testing:find-delete> .................................................. ok
testing:find-union> .................................................. ok
testing:union-nil> .................................................. ok
testing:union-insert> .x failed:
shrinking> if and (valid (Node [Node [Leaf [], -21, -18, Leaf []], 5, 0, Node [Leaf [], 21, 23, Leaf []]])) (valid (Node [Leaf [], -14, 27, Leaf []])) then equalContents (union (insert (-14) (26) (Node [Node [Leaf [], -21, -18, Leaf []], 5, 0, Node [Leaf [], 21, 23, Leaf []]])) (Node [Leaf [], -14, 27, Leaf []])) (insert (-14) (26) (union (Node [Node [Leaf [], -21, -18, Leaf []], 5, 0, Node [Leaf [], 21, 23, Leaf []]]) (Node [Leaf [], -14, 27, Leaf []]))) else True
after 108 tests.
testing:insert-complete> .................................................. ok
testing:insert-complete-for-delete> .................................................. ok
testing:insert-complete-for-union> .................................................. ok
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> .................................................. ok
testing:union-preserves-equiv> .................................................. ok
testing:find-preserves-equiv> .................................................. ok
testing:equivs> .................................................. ok
BST-bug-1.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> .................................................. ok
testing:union-valid> .................................................. ok
testing:nil-model> .................................................. ok
testing:insert-model> .x failed:
shrinking> if valid (Node [Leaf [], -12, -2, Leaf []]) then toList (insert (25) (25) (Node [Leaf [], -12, -2, Leaf []])) == listInsert (IIP [25, 25]) (deleteKey (25) (toList (Node [Leaf [], -12, -2, Leaf []]))) else True
after 2 tests.
testing:delete-model> .x failed:
shrinking> if valid (Node [Node [Node [Leaf [], -14, 12, Leaf []], -11, 0, Leaf []], 2, -16, Node [Leaf [], 4, 6, Node [Leaf [], 22, 30, Leaf []]]]) then toList (delete (2) (Node [Node [Node [Leaf [], -14, 12, Leaf []], -11, 0, Leaf []], 2, -16, Node [Leaf [], 4, 6, Node [Leaf [], 22, 30, Leaf []]]])) == deleteKey (2) (toList (Node [Node [Node [Leaf [], -14, 12, Leaf []], -11, 0, Leaf []], 2, -16, Node [Leaf [], 4, 6, Node [Leaf [], 22, 30, Leaf []]]])) else True
after 185 tests.
testing:find-model> .................................................. ok
testing:insert-post> .x failed:
shrinking> if valid (Node [Leaf [], -23, 15, Node [Leaf [], -9, 3, Node [Leaf [], 8, -27, Leaf []]]]) then find (-9) (insert (-8) (-17) (Node [Leaf [], -23, 15, Node [Leaf [], -9, 3, Node [Leaf [], 8, -27, Leaf []]]])) == if -8 == -9 then Just [-17] else find (-9) (Node [Leaf [], -23, 15, Node [Leaf [], -9, 3, Node [Leaf [], 8, -27, Leaf []]]]) else True
after 69 tests.
testing:insert-post-same-key> .................................................. ok
testing:union-post> .x failed:
shrinking> if and (valid (Node [Leaf [], -27, 13, Node [Node [Leaf [], -26, 16, Leaf []], -4, 4, Leaf []]])) (valid (Node [Leaf [], 6, 4, Leaf []])) then find (6) (union (Node [Leaf [], -27, 13, Node [Node [Leaf [], -26, 16, Leaf []], -4, 4, Leaf []]]) (Node [Leaf [], 6, 4, Leaf []])) == case find (6) (Node [Leaf [], -27, 13, Node [Node [Leaf [], -26, 16, Leaf []], -4, 4, Leaf []]]) of
  ; Just [v] -> Just [v]
  ; Nothing [] -> case find (6) (Node [Leaf [], 6, 4, Leaf []]) of
  ; Just [v1] -> Just [v1]
  ; Nothing [] -> Nothing [] else True
after 943 tests.
testing:find-post-present> .................................................. ok
testing:find-post-absent> .................................................. ok
testing:insert-delete-complete> .x failed:
shrinking> if valid (Node [Leaf [], 0, 3, Node [Leaf [], 26, 2, Leaf []]]) then case find (26) (Node [Leaf [], 0, 3, Node [Leaf [], 26, 2, Leaf []]]) of
  ; Nothing [] -> Node [Leaf [], 0, 3, Node [Leaf [], 26, 2, Leaf []]] == delete (26) (Node [Leaf [], 0, 3, Node [Leaf [], 26, 2, Leaf []]])
  ; Just [v] -> Node [Leaf [], 0, 3, Node [Leaf [], 26, 2, Leaf []]] == insert (26) (v) (Node [Leaf [], 0, 3, Node [Leaf [], 26, 2, Leaf []]]) else True
after 309 tests.
testing:insert-insert-weak> x failed:
shrinking> if and (valid (Leaf [])) (not (-1 == 13)) then equalContents (insert (-1) (6) (insert (13) (-29) (Leaf []))) (insert (13) (-29) (insert (-1) (6) (Leaf []))) else True
after 0 tests.
testing:insert-insert> x failed:
shrinking> if valid (Leaf []) then equalContents (insert (2) (12) (insert (-27) (-27) (Leaf []))) (if 2 == -27 then insert (2) (12) (Leaf []) else insert (-27) (-27) (insert (2) (12) (Leaf []))) else True
after 0 tests.
testing:insert-delete-weak> .................................................. ok
testing:insert-delete> .................................................. ok
testing:insert-union> .................................................. ok
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .................................................. ok
testing:delete-insert> .x failed:
shrinking> if valid (Node [Leaf [], -13, 18, Leaf []]) then equalContents (delete (-15) (insert (-15) (-28) (Node [Leaf [], -13, 18, Leaf []]))) (if -15 == -15 then delete (-15) (Node [Leaf [], -13, 18, Leaf []]) else insert (-15) (-28) (delete (-15) (Node [Leaf [], -13, 18, Leaf []]))) else True
after 18 tests.
testing:delete-delete> .................................................. ok
testing:delete-union> .x failed:
shrinking> if and (valid (Node [Node [Node [Leaf [], -30, 20, Leaf []], 13, -21, Leaf []], 29, 14, Leaf []])) (valid (Leaf [])) then equalContents (delete (-30) (union (Node [Node [Node [Leaf [], -30, 20, Leaf []], 13, -21, Leaf []], 29, 14, Leaf []]) (Leaf []))) (union (delete (-30) (Node [Node [Node [Leaf [], -30, 20, Leaf []], 13, -21, Leaf []], 29, 14, Leaf []])) (delete (-30) (Leaf []))) else True
after 1206 tests.
testing:union-nil-1> .................................................. ok
testing:union-nil-2> .x failed:
shrinking> if valid (Node [Node [Leaf [], -28, -12, Node [Leaf [], 0, -3, Leaf []]], 17, 19, Leaf []]) then union (Node [Node [Leaf [], -28, -12, Node [Leaf [], 0, -3, Leaf []]], 17, 19, Leaf []]) (nil) == Node [Node [Leaf [], -28, -12, Node [Leaf [], 0, -3, Leaf []]], 17, 19, Leaf []] else True
after 1 tests.
testing:union-delete-insert> .x failed:
shrinking> if and (valid (Node [Leaf [], -7, -17, Leaf []])) (valid (Leaf [])) then equalContents (union (delete (-18) (Node [Leaf [], -7, -17, Leaf []])) (insert (-18) (-6) (Leaf []))) (insert (-18) (-6) (union (Node [Leaf [], -7, -17, Leaf []]) (Leaf []))) else True
after 1 tests.
testing:union-union-idem> x failed:
shrinking> if valid (Node [Node [Leaf [], -9, -11, Leaf []], 30, -25, Leaf []]) then equalContents (union (Node [Node [Leaf [], -9, -11, Leaf []], 30, -25, Leaf []]) (Node [Node [Leaf [], -9, -11, Leaf []], 30, -25, Leaf []])) (Node [Node [Leaf [], -9, -11, Leaf []], 30, -25, Leaf []]) else True
after 0 tests.
testing:union-union-assoc> .................................................. ok
testing:find-nil> .................................................. ok
testing:find-insert> .x failed:
shrinking> if valid (Node [Leaf [], -12, -3, Node [Node [Leaf [], 0, 28, Leaf []], 28, 16, Leaf []]]) then find (28) (insert (19) (-30) (Node [Leaf [], -12, -3, Node [Node [Leaf [], 0, 28, Leaf []], 28, 16, Leaf []]])) == if 28 == 19 then Just [-30] else find (28) (Node [Leaf [], -12, -3, Node [Node [Leaf [], 0, 28, Leaf []], 28, 16, Leaf []]]) else True
after 1371 tests.
testing:find-delete> .............................x failed:
shrinking> if valid (Node [Node [Node [Leaf [], 5, -9, Leaf []], 24, -9, Leaf []], 26, 28, Leaf []]) then find (24) (delete (26) (Node [Node [Node [Leaf [], 5, -9, Leaf []], 24, -9, Leaf []], 26, 28, Leaf []])) == if 24 == 26 then Nothing [] else find (24) (Node [Node [Node [Leaf [], 5, -9, Leaf []], 24, -9, Leaf []], 26, 28, Leaf []]) else True
after 56800 tests.
testing:find-union> .x failed:
shrinking> if and (valid (Node [Node [Leaf [], -30, -5, Node [Leaf [], -18, -28, Leaf []]], -9, -25, Leaf []])) (valid (Node [Node [Node [Leaf [], 7, 4, Leaf []], 8, 5, Node [Leaf [], 11, -7, Leaf []]], 17, 1, Leaf []])) then find (-9) (union (Node [Node [Leaf [], -30, -5, Node [Leaf [], -18, -28, Leaf []]], -9, -25, Leaf []]) (Node [Node [Node [Leaf [], 7, 4, Leaf []], 8, 5, Node [Leaf [], 11, -7, Leaf []]], 17, 1, Leaf []])) == case find (-9) (Node [Node [Leaf [], -30, -5, Node [Leaf [], -18, -28, Leaf []]], -9, -25, Leaf []]) of
  ; Nothing [] -> find (-9) (Node [Node [Node [Leaf [], 7, 4, Leaf []], 8, 5, Node [Leaf [], 11, -7, Leaf []]], 17, 1, Leaf []])
  ; Just [v] -> Just [v] else True
after 323 tests.
testing:union-nil> .................................................. ok
testing:union-insert> .................................................. ok
testing:insert-complete> .x failed:
shrinking> if valid (Node [Leaf [], 4, 4, Node [Leaf [], 18, -16, Leaf []]]) then Node [Leaf [], 4, 4, Node [Leaf [], 18, -16, Leaf []]] == foldl (flip2 (uncurry (insert))) (nil) (insertions (Node [Leaf [], 4, 4, Node [Leaf [], 18, -16, Leaf []]])) else True
after 13 tests.
testing:insert-complete-for-delete> .x failed:
shrinking> if valid (Node [Node [Node [Leaf [], 1, 24, Leaf []], 19, 21, Leaf []], 30, -5, Leaf []]) then delete (6) (Node [Node [Node [Leaf [], 1, 24, Leaf []], 19, 21, Leaf []], 30, -5, Leaf []]) == foldl (flip2 (uncurry (insert))) (nil) (insertions (delete (6) (Node [Node [Node [Leaf [], 1, 24, Leaf []], 19, 21, Leaf []], 30, -5, Leaf []]))) else True
after 17 tests.
testing:insert-complete-for-union> .x failed:
shrinking> if and (valid (Leaf [])) (valid (Node [Leaf [], -17, -22, Node [Leaf [], 13, 10, Leaf []]])) then union (Leaf []) (Node [Leaf [], -17, -22, Node [Leaf [], 13, 10, Leaf []]]) == foldl (flip2 (uncurry (insert))) (nil) (insertions (union (Leaf []) (Node [Leaf [], -17, -22, Node [Leaf [], 13, 10, Leaf []]]))) else True
after 1 tests.
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> .x failed:
shrinking> case equivs (Cons [IIP [17, 12], Cons [IIP [-28, -27], Cons [IIP [1, 4], Cons [IIP [1, 23], Cons [IIP [18, -19], Empty []]]]]]) of
  ; BBP [fstt, sndt] -> equalContents (delete (7) (fstt)) (delete (7) (sndt))
after 6 tests.
testing:union-preserves-equiv> .x failed:
shrinking> case equivs (Cons [IIP [-6, 12], Cons [IIP [10, 11], Cons [IIP [-19, -1], Cons [IIP [20, 21], Cons [IIP [-26, -10], Empty []]]]]]) of
  ; BBP [fstt, sndt] -> equalContents (union (fstt) (sndt)) (union (sndt) (fstt))
after 3 tests.
testing:find-preserves-equiv> .x failed:
shrinking> case equivs (Cons [IIP [-30, 7], Cons [IIP [3, -2], Cons [IIP [-18, -22], Empty []]]]) of
  ; BBP [fstt, sndt] -> find (3) (fstt) == find (3) (sndt)
after 261 tests.
testing:equivs> .x failed:
shrinking> case equivs (Cons [IIP [24, -19], Cons [IIP [20, -22], Empty []]]) of
  ; BBP [fstt, sndt] -> equalContents (fstt) (sndt)
after 10 tests.
BST-bug-2.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .x failed:
shrinking> if valid (Node [Leaf [], -27, -11, Node [Leaf [], 11, 19, Leaf []]]) then valid (insert (11) (16) (Node [Leaf [], -27, -11, Node [Leaf [], 11, 19, Leaf []]])) else True
after 102 tests.
testing:delete-valid> .................................................. ok
testing:union-valid> .x failed:
shrinking> if and (valid (Node [Node [Leaf [], -14, 11, Node [Leaf [], 17, -15, Leaf []]], 27, 7, Leaf []])) (valid (Node [Leaf [], 17, 14, Leaf []])) then valid (union (Node [Node [Leaf [], -14, 11, Node [Leaf [], 17, -15, Leaf []]], 27, 7, Leaf []]) (Node [Leaf [], 17, 14, Leaf []])) else True
after 464 tests.
testing:nil-model> .................................................. ok
testing:insert-model> .x failed:
shrinking> if valid (Node [Leaf [], -25, -3, Node [Node [Leaf [], -8, -26, Leaf []], 22, 22, Leaf []]]) then toList (insert (-25) (-19) (Node [Leaf [], -25, -3, Node [Node [Leaf [], -8, -26, Leaf []], 22, 22, Leaf []]])) == listInsert (IIP [-25, -19]) (deleteKey (-25) (toList (Node [Leaf [], -25, -3, Node [Node [Leaf [], -8, -26, Leaf []], 22, 22, Leaf []]]))) else True
after 286 tests.
testing:delete-model> .................................................. ok
testing:find-model> .................................................. ok
testing:insert-post> .x failed:
shrinking> if valid (Node [Leaf [], -26, 13, Node [Node [Leaf [], -8, 12, Leaf []], 13, -12, Leaf []]]) then find (13) (insert (13) (1) (Node [Leaf [], -26, 13, Node [Node [Leaf [], -8, 12, Leaf []], 13, -12, Leaf []]])) == if 13 == 13 then Just [1] else find (13) (Node [Leaf [], -26, 13, Node [Node [Leaf [], -8, 12, Leaf []], 13, -12, Leaf []]]) else True
after 1620 tests.
testing:insert-post-same-key> .x failed:
shrinking> if valid (Node [Leaf [], -22, 20, Leaf []]) then find (-22) (insert (-22) (-7) (Node [Leaf [], -22, 20, Leaf []])) == if -22 == -22 then Just [-7] else find (-22) (Node [Leaf [], -22, 20, Leaf []]) else True
after 492 tests.
testing:union-post> ...........x failed:
shrinking> if and (valid (Node [Leaf [], 7, 9, Node [Leaf [], 27, -20, Leaf []]])) (valid (Node [Leaf [], 27, 13, Leaf []])) then find (27) (union (Node [Leaf [], 7, 9, Node [Leaf [], 27, -20, Leaf []]]) (Node [Leaf [], 27, 13, Leaf []])) == case find (27) (Node [Leaf [], 7, 9, Node [Leaf [], 27, -20, Leaf []]]) of
  ; Just [v] -> Just [v]
  ; Nothing [] -> case find (27) (Node [Leaf [], 27, 13, Leaf []]) of
  ; Just [v1] -> Just [v1]
  ; Nothing [] -> Nothing [] else True
after 20886 tests.
testing:find-post-present> .x failed:
shrinking> if valid (Node [Leaf [], 23, -22, Leaf []]) then find (23) (insert (23) (4) (Node [Leaf [], 23, -22, Leaf []])) == Just [4] else True
after 67 tests.
testing:find-post-absent> .................................................. ok
testing:insert-delete-complete> .x failed:
shrinking> if valid (Node [Node [Leaf [], -17, -21, Node [Leaf [], -10, -26, Leaf []]], 3, -21, Leaf []]) then case find (-10) (Node [Node [Leaf [], -17, -21, Node [Leaf [], -10, -26, Leaf []]], 3, -21, Leaf []]) of
  ; Nothing [] -> Node [Node [Leaf [], -17, -21, Node [Leaf [], -10, -26, Leaf []]], 3, -21, Leaf []] == delete (-10) (Node [Node [Leaf [], -17, -21, Node [Leaf [], -10, -26, Leaf []]], 3, -21, Leaf []])
  ; Just [v] -> Node [Node [Leaf [], -17, -21, Node [Leaf [], -10, -26, Leaf []]], 3, -21, Leaf []] == insert (-10) (v) (Node [Node [Leaf [], -17, -21, Node [Leaf [], -10, -26, Leaf []]], 3, -21, Leaf []]) else True
after 146 tests.
testing:insert-insert-weak> .................................................. ok
testing:insert-insert> .x failed:
shrinking> if valid (Leaf []) then equalContents (insert (-7) (-15) (insert (-7) (-21) (Leaf []))) (if -7 == -7 then insert (-7) (-15) (Leaf []) else insert (-7) (-21) (insert (-7) (-15) (Leaf []))) else True
after 7 tests.
testing:insert-delete-weak> .................................................. ok
testing:insert-delete> .....x failed:
shrinking> if valid (Node [Leaf [], -17, 18, Leaf []]) then equalContents (insert (-17) (-12) (delete (-17) (Node [Leaf [], -17, 18, Leaf []]))) (if -17 == -17 then insert (-17) (-12) (Node [Leaf [], -17, 18, Leaf []]) else delete (-17) (insert (-17) (-12) (Node [Leaf [], -17, 18, Leaf []]))) else True
after 8338 tests.
testing:insert-union> .................................................. ok
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .................................................. ok
testing:delete-insert> .............x failed:
shrinking> if valid (Node [Leaf [], -16, -15, Leaf []]) then equalContents (delete (-16) (insert (-16) (-6) (Node [Leaf [], -16, -15, Leaf []]))) (if -16 == -16 then delete (-16) (Node [Leaf [], -16, -15, Leaf []]) else insert (-16) (-6) (delete (-16) (Node [Leaf [], -16, -15, Leaf []]))) else True
after 25734 tests.
testing:delete-delete> .................................................. ok
testing:delete-union> .............x failed:
shrinking> if and (valid (Node [Node [Leaf [], 0, 15, Leaf []], 6, 20, Node [Leaf [], 17, -27, Leaf []]])) (valid (Node [Leaf [], -30, -4, Node [Leaf [], -8, 12, Node [Leaf [], 0, -19, Leaf []]]])) then equalContents (delete (0) (union (Node [Node [Leaf [], 0, 15, Leaf []], 6, 20, Node [Leaf [], 17, -27, Leaf []]]) (Node [Leaf [], -30, -4, Node [Leaf [], -8, 12, Node [Leaf [], 0, -19, Leaf []]]]))) (union (delete (0) (Node [Node [Leaf [], 0, 15, Leaf []], 6, 20, Node [Leaf [], 17, -27, Leaf []]])) (delete (0) (Node [Leaf [], -30, -4, Node [Leaf [], -8, 12, Node [Leaf [], 0, -19, Leaf []]]]))) else True
after 24372 tests.
testing:union-nil-1> .................................................. ok
testing:union-nil-2> .................................................. ok
testing:union-delete-insert> .x failed:
shrinking> if and (valid (Node [Leaf [], -12, -26, Node [Node [Leaf [], -7, -10, Leaf []], 29, -9, Leaf []]])) (valid (Leaf [])) then equalContents (union (delete (-7) (Node [Leaf [], -12, -26, Node [Node [Leaf [], -7, -10, Leaf []], 29, -9, Leaf []]])) (insert (-7) (-29) (Leaf []))) (insert (-7) (-29) (union (Node [Leaf [], -12, -26, Node [Node [Leaf [], -7, -10, Leaf []], 29, -9, Leaf []]]) (Leaf []))) else True
after 268 tests.
testing:union-union-idem> .x failed:
shrinking> if valid (Node [Leaf [], 11, -17, Leaf []]) then equalContents (union (Node [Leaf [], 11, -17, Leaf []]) (Node [Leaf [], 11, -17, Leaf []])) (Node [Leaf [], 11, -17, Leaf []]) else True
after 3 tests.
testing:union-union-assoc> .................................................. ok
testing:find-nil> .................................................. ok
testing:find-insert> .....x failed:
shrinking> if valid (Node [Leaf [], -17, 1, Leaf []]) then find (-17) (insert (-17) (23) (Node [Leaf [], -17, 1, Leaf []])) == if -17 == -17 then Just [23] else find (-17) (Node [Leaf [], -17, 1, Leaf []]) else True
after 9555 tests.
testing:find-delete> .................................................. ok
testing:find-union> ....................................x failed:
shrinking> if and (valid (Node [Leaf [], -12, 22, Node [Leaf [], 17, 14, Leaf []]])) (valid (Node [Node [Leaf [], -12, -26, Node [Leaf [], -5, 11, Leaf []]], 28, -30, Leaf []])) then find (-12) (union (Node [Leaf [], -12, 22, Node [Leaf [], 17, 14, Leaf []]]) (Node [Node [Leaf [], -12, -26, Node [Leaf [], -5, 11, Leaf []]], 28, -30, Leaf []])) == case find (-12) (Node [Leaf [], -12, 22, Node [Leaf [], 17, 14, Leaf []]]) of
  ; Nothing [] -> find (-12) (Node [Node [Leaf [], -12, -26, Node [Leaf [], -5, 11, Leaf []]], 28, -30, Leaf []])
  ; Just [v] -> Just [v] else True
after 70329 tests.
testing:union-nil> .................................................. ok
testing:union-insert> .................................................. ok
testing:insert-complete> .................................................. ok
testing:insert-complete-for-delete> .................................................. ok
testing:insert-complete-for-union> .................................................. ok
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> .................................................. ok
testing:union-preserves-equiv> .................................................. ok
testing:find-preserves-equiv> .................................................. ok
testing:equivs> .................................................. ok
BST-bug-3.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> .................................................. ok
testing:union-valid> .................................................. ok
testing:nil-model> .................................................. ok
testing:insert-model> .x failed:
shrinking> if valid (Node [Leaf [], 9, -22, Leaf []]) then toList (insert (9) (24) (Node [Leaf [], 9, -22, Leaf []])) == listInsert (IIP [9, 24]) (deleteKey (9) (toList (Node [Leaf [], 9, -22, Leaf []]))) else True
after 13 tests.
testing:delete-model> .................................................. ok
testing:find-model> .................................................. ok
testing:insert-post> ...x failed:
shrinking> if valid (Node [Leaf [], -26, 18, Node [Leaf [], -4, -12, Leaf []]]) then find (-4) (insert (-4) (-10) (Node [Leaf [], -26, 18, Node [Leaf [], -4, -12, Leaf []]])) == if -4 == -4 then Just [-10] else find (-4) (Node [Leaf [], -26, 18, Node [Leaf [], -4, -12, Leaf []]]) else True
after 4009 tests.
testing:insert-post-same-key> .x failed:
shrinking> if valid (Node [Node [Node [Leaf [], -18, -24, Leaf []], 8, 18, Leaf []], 21, -2, Leaf []]) then find (8) (insert (8) (0) (Node [Node [Node [Leaf [], -18, -24, Leaf []], 8, 18, Leaf []], 21, -2, Leaf []])) == if 8 == 8 then Just [0] else find (8) (Node [Node [Node [Leaf [], -18, -24, Leaf []], 8, 18, Leaf []], 21, -2, Leaf []]) else True
after 135 tests.
testing:union-post> .x failed:
shrinking> if and (valid (Node [Leaf [], 1, 20, Node [Leaf [], 26, -11, Leaf []]])) (valid (Node [Leaf [], 1, -29, Leaf []])) then find (1) (union (Node [Leaf [], 1, 20, Node [Leaf [], 26, -11, Leaf []]]) (Node [Leaf [], 1, -29, Leaf []])) == case find (1) (Node [Leaf [], 1, 20, Node [Leaf [], 26, -11, Leaf []]]) of
  ; Just [v] -> Just [v]
  ; Nothing [] -> case find (1) (Node [Leaf [], 1, -29, Leaf []]) of
  ; Just [v1] -> Just [v1]
  ; Nothing [] -> Nothing [] else True
after 987 tests.
testing:find-post-present> .x failed:
shrinking> if valid (Node [Leaf [], -27, 5, Node [Leaf [], 7, 3, Leaf []]]) then find (-27) (insert (-27) (30) (Node [Leaf [], -27, 5, Node [Leaf [], 7, 3, Leaf []]])) == Just [30] else True
after 351 tests.
testing:find-post-absent> .................................................. ok
testing:insert-delete-complete> .................................................. ok
testing:insert-insert-weak> .................................................. ok
testing:insert-insert> .x failed:
shrinking> if valid (Node [Leaf [], -9, 2, Leaf []]) then equalContents (insert (-15) (28) (insert (-15) (27) (Node [Leaf [], -9, 2, Leaf []]))) (if -15 == -15 then insert (-15) (28) (Node [Leaf [], -9, 2, Leaf []]) else insert (-15) (27) (insert (-15) (28) (Node [Leaf [], -9, 2, Leaf []]))) else True
after 70 tests.
testing:insert-delete-weak> .................................................. ok
testing:insert-delete> .........x failed:
shrinking> if valid (Node [Leaf [], -10, -14, Leaf []]) then equalContents (insert (-10) (-2) (delete (-10) (Node [Leaf [], -10, -14, Leaf []]))) (if -10 == -10 then insert (-10) (-2) (Node [Leaf [], -10, -14, Leaf []]) else delete (-10) (insert (-10) (-2) (Node [Leaf [], -10, -14, Leaf []]))) else True
after 17443 tests.
testing:insert-union> .................................................. ok
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .................................................. ok
testing:delete-insert> .................................................. ok
testing:delete-delete> .................................................. ok
testing:delete-union> .................................................. ok
testing:union-nil-1> .................................................. ok
testing:union-nil-2> .................................................. ok
testing:union-delete-insert> .x failed:
shrinking> if and (valid (Node [Node [Leaf [], -15, -29, Leaf []], -12, 28, Node [Leaf [], 10, -27, Leaf []]])) (valid (Leaf [])) then equalContents (union (delete (-12) (Node [Node [Leaf [], -15, -29, Leaf []], -12, 28, Node [Leaf [], 10, -27, Leaf []]])) (insert (-12) (8) (Leaf []))) (insert (-12) (8) (union (Node [Node [Leaf [], -15, -29, Leaf []], -12, 28, Node [Leaf [], 10, -27, Leaf []]]) (Leaf []))) else True
after 145 tests.
testing:union-union-idem> .................................................. ok
testing:union-union-assoc> .................................................. ok
testing:find-nil> .................................................. ok
testing:find-insert> ......x failed:
shrinking> if valid (Node [Leaf [], -16, -22, Leaf []]) then find (-16) (insert (-16) (22) (Node [Leaf [], -16, -22, Leaf []])) == if -16 == -16 then Just [22] else find (-16) (Node [Leaf [], -16, -22, Leaf []]) else True
after 10790 tests.
testing:find-delete> .................................................. ok
testing:find-union> ...............................x failed:
shrinking> if and (valid (Node [Node [Leaf [], -4, 19, Leaf []], 27, -12, Leaf []])) (valid (Node [Leaf [], 27, 5, Leaf []])) then find (27) (union (Node [Node [Leaf [], -4, 19, Leaf []], 27, -12, Leaf []]) (Node [Leaf [], 27, 5, Leaf []])) == case find (27) (Node [Node [Leaf [], -4, 19, Leaf []], 27, -12, Leaf []]) of
  ; Nothing [] -> find (27) (Node [Leaf [], 27, 5, Leaf []])
  ; Just [v] -> Just [v] else True
after 61537 tests.
testing:union-nil> .................................................. ok
testing:union-insert> .................................................. ok
testing:insert-complete> .................................................. ok
testing:insert-complete-for-delete> .................................................. ok
testing:insert-complete-for-union> .................................................. ok
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> .................................................. ok
testing:union-preserves-equiv> .................................................. ok
testing:find-preserves-equiv> .................................................. ok
testing:equivs> .................................................. ok
BST-bug-4.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> ..................................................BST-bug-5.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> .................................................. ok
testing:union-valid> .................................................. ok
testing:nil-model> .................................................. ok
testing:insert-model> .................................................. ok
testing:delete-model> .x failed:
shrinking> if valid (Node [Leaf [], -28, -22, Node [Node [Leaf [], -7, -14, Leaf []], 5, -6, Leaf []]]) then toList (delete (5) (Node [Leaf [], -28, -22, Node [Node [Leaf [], -7, -14, Leaf []], 5, -6, Leaf []]])) == deleteKey (5) (toList (Node [Leaf [], -28, -22, Node [Node [Leaf [], -7, -14, Leaf []], 5, -6, Leaf []]])) else True
after 411 tests.
testing:find-model> .................................................. ok
testing:insert-post> .................................................. ok
testing:insert-post-same-key> .................................................. ok
testing:union-post> .................................................. ok
testing:find-post-present> .................................................. ok
testing:find-post-absent> .x failed:
shrinking> if valid (Node [Node [Leaf [], -14, -2, Leaf []], 11, 30, Leaf []]) then find (-14) (delete (-14) (Node [Node [Leaf [], -14, -2, Leaf []], 11, 30, Leaf []])) == Nothing [] else True
after 1215 tests.
testing:insert-delete-complete> .................................................. ok
testing:insert-insert-weak> .................................................. ok
testing:insert-insert> .................................................. ok
testing:insert-delete-weak> .................................................. ok
testing:insert-delete> .................................................. ok
testing:insert-union> .................................................. ok
testing:delete-nil> .................................................. ok
testing:delete-insert-weak> .................................................. ok
testing:delete-insert> .x failed:
shrinking> if valid (Node [Leaf [], 26, -29, Leaf []]) then equalContents (delete (-24) (insert (-24) (17) (Node [Leaf [], 26, -29, Leaf []]))) (if -24 == -24 then delete (-24) (Node [Leaf [], 26, -29, Leaf []]) else insert (-24) (17) (delete (-24) (Node [Leaf [], 26, -29, Leaf []]))) else True
after 877 tests.
testing:delete-delete> ..........................................x failed:
shrinking> if valid (Node [Leaf [], -11, -1, Node [Leaf [], -2, -3, Leaf []]]) then equalContents (delete (-2) (delete (-11) (Node [Leaf [], -11, -1, Node [Leaf [], -2, -3, Leaf []]]))) (delete (-11) (delete (-2) (Node [Leaf [], -11, -1, Node [Leaf [], -2, -3, Leaf []]]))) else True
after 82931 tests.
testing:delete-union> .x failed:
shrinking> if and (valid (Node [Leaf [], -1, -13, Leaf []])) (valid (Node [Node [Leaf [], -12, 30, Leaf []], -9, -10, Node [Node [Leaf [], 14, 20, Leaf []], 16, 23, Leaf []]])) then equalContents (delete (-1) (union (Node [Leaf [], -1, -13, Leaf []]) (Node [Node [Leaf [], -12, 30, Leaf []], -9, -10, Node [Node [Leaf [], 14, 20, Leaf []], 16, 23, Leaf []]]))) (union (delete (-1) (Node [Leaf [], -1, -13, Leaf []])) (delete (-1) (Node [Node [Leaf [], -12, 30, Leaf []], -9, -10, Node [Node [Leaf [], 14, 20, Leaf []], 16, 23, Leaf []]]))) else True
after 1794 tests.
testing:union-nil-1> .................................................. ok
testing:union-nil-2> .................................................. ok
testing:union-delete-insert> ..x failed:
shrinking> if and (valid (Node [Node [Leaf [], -29, -24, Leaf []], 11, 2, Leaf []])) (valid (Leaf [])) then equalContents (union (delete (-29) (Node [Node [Leaf [], -29, -24, Leaf []], 11, 2, Leaf []])) (insert (-29) (-21) (Leaf []))) (insert (-29) (-21) (union (Node [Node [Leaf [], -29, -24, Leaf []], 11, 2, Leaf []]) (Leaf []))) else True
after 2479 tests.
testing:union-union-idem> .................................................. ok
testing:union-union-assoc> .................................................. ok
testing:find-nil> .................................................. ok
testing:find-insert> .................................................. ok
testing:find-delete> .........................................x failed:
shrinking> if valid (Node [Leaf [], -11, -18, Node [Leaf [], 25, 22, Leaf []]]) then find (25) (delete (25) (Node [Leaf [], -11, -18, Node [Leaf [], 25, 22, Leaf []]])) == if 25 == 25 then Nothing [] else find (25) (Node [Leaf [], -11, -18, Node [Leaf [], 25, 22, Leaf []]]) else True
after 81311 tests.
testing:find-union> .................................................. ok
testing:union-nil> .................................................. ok
testing:union-insert> .................................................. ok
testing:insert-complete> .................................................. ok
testing:insert-complete-for-delete> .................................................. ok
testing:insert-complete-for-union> .................................................. ok
testing:insert-preserves-equiv> .................................................. ok
testing:delete-preserves-equiv> .x failed:
shrinking> case equivs (Cons [IIP [-18, -26], Cons [IIP [2, 21], Cons [IIP [18, 19], Cons [IIP [-27, 27], Empty []]]]]) of
  ; BBP [fstt, sndt] -> equalContents (delete (-27) (fstt)) (delete (-27) (sndt))
after 63 tests.
testing:union-preserves-equiv> .................................................. ok
testing:find-preserves-equiv> .................................................. ok
testing:equivs> .................................................. ok
BST-bug-6.pun
testing:nil-valid> .................................................. ok
testing:insert-valid> .................................................. ok
testing:delete-valid> .................................................. ok
testing:union-valid> .x failed:
shrinking> if and (valid (Node [Leaf [], 7, -12, Leaf []])) (valid (Node [Leaf [], -19, 5, Leaf []])) then valid (union (Node [Leaf [], 7, -12, Leaf []]) (Node [Leaf [], -19, 5, Leaf []])) else True
after 33 tests.
testing:nil-model> .................................................. ok
testing:insert-model> .................................................. ok
testing:delete-model> ...........................