// --------------------------- Helper functions ---------------------------

data Unit = Unit .

data Maybe = Nothing | Just [4] .

equal : integer -> integer -> boolean .
equal m n =
  if   m <= n
  then n <= m
  else false .

not : boolean -> boolean .
not b = if b then false else true .

and : boolean -> boolean -> boolean .
and b1 b2 =
  if b1 then b2 else false .

less : integer -> integer -> boolean .
less m n = and (m <= n) (not (equal m n)) .

greater : integer -> integer -> boolean .
greater m n = not (m <= n) .

equalMaybes : (Maybe, Maybe) -> boolean .
equalMaybes m =
    case m of
    ; (Nothing,   Nothing)   -> true
    ; (Just [v1], Just [v2]) -> equal v1 v2
    ; (Nothing,   Just [v3]) -> false
    ; (Just [v4], Nothing)   -> false . 

first : (0, 1) -> 0 .
first pair =
    case pair of
    ; (x, y) -> x .

equalPairs : (integer, integer) -> (integer, integer) -> boolean .
equalPairs p1 p2 = and (equal (fst p1) (fst p2))
                       (equal (snd p1) (snd p2)) .

compose : (0 -> 1) -> (2 -> 0) -> 2 -> 1 .
compose f g x = f (g x) .

flip : (0 -> 1 -> 2) -> 1 -> 0 -> 2 .
flip f a b = f b a .

uncurry : (0 -> 1 -> 2) -> (0, 1) -> 2 .
uncurry f p = f (fst p) (snd p) .

foldl : (0 -> 1 -> 0) -> 0 -> List -> 0 .
foldl f acc l = 
    case l of
    ; Empty        -> acc
    ; Cons [x, xs] -> foldl f (f acc x) xs .

// ----------------------- BST and operations -----------------------

data BST     = Leaf     | Node [BST, integer, integer, BST] .

nil : BST .
nil = Leaf .

insert : integer -> integer -> BST -> BST .
insert k1 v1 t = 
    case t of
    ; Leaf                  -> Node [Leaf, k1, v1, Leaf]
    ; Node [l2, k2, v2, r2] ->
        if   less k1 k2
        then Node [(insert k1 v1 l2), k2, v2, r2]
        else if greater k1 k2
             then Node [l2, k2, v2, (insert k1 v1 r2)]
             else Node [Leaf, k1, v1, Leaf] .

delete : integer -> BST -> BST .
delete k t =
    case t of
    ; Leaf                  -> Leaf
    ; Node [l1, k1, v1, r1] ->
        if   less k k1
        then Node [(delete k l1), k1, v1, r1]
        else if   greater k k1
             then Node [l1, k1, v1, (delete k r1)]
             else (union l1 r1) .

union : BST -> BST -> BST .
union t1 t2 =
    case t1 of
    ; Leaf -> t2
    ; Node [l1, k1, v1, r1] ->
        union (delete k1 t1) (insert k1 v1 t2) .

find : integer -> BST -> Maybe .
find k t =
    case t of
    ; Leaf                  -> Nothing
    ; Node [l1, k1, v1, r1] ->
        if   (equal k k1)
        then Just [v1]
        else if   (greater k k1)
             then (find k r1)
             else (find k l1) .

validify : BST -> BST .
validify t =
    case t of
    ; Leaf              -> Leaf
    ; Node [l, k, v, r] -> insert k v (union (validify l) (validify r)) .

valid : BST -> boolean .
valid t =
    case t of
    ; Leaf              -> true
    ; Node [l, k, v, r] -> and (and (valid l) (valid r)) (and (lessKeys l) (greaterKeys l)) .

lessKeys : BST -> boolean .
lessKeys t =
    case t of
    ; Leaf                  -> true
    ; Node [l1, k1, v1, r1] ->
        case l1 of
            ; Leaf                  -> true
            ; Node [l2, k2, v2, r2] ->
                if   (less k2 k1)
                then (lessKeys l1)
                else false .

greaterKeys : BST -> boolean .
greaterKeys t =
    case t of
    ; Leaf -> true
    ; Node [l1, k1, v1, r1] ->
        case r1 of
            ; Leaf -> true
            ; Node [l2, k2, v2, r2] ->
                if   (greater k2 k1)
                then (greaterKeys r1)
                else false .

equalContents : BST -> BST -> boolean .
equalContents t1 t2 = equalLists (toList t1) (toList t2) .

equalBSTs : BST -> BST -> boolean .
equalBSTs t1 t2 =
    case t1 of
    ; Leaf ->
        (case t2 of
        ; Leaf                  -> true
        ; Node [l1, k1, v1, r1] -> false)
    ; Node [l2, k2, v2, r2] ->
        (case t2 of
        ; Leaf                  -> false
        ; Node [l3, k3, v3, r3] ->
            if   (and (equal k3 k2) (equal v2 v3))
            then true
            else false) .

// -------------------------- List and operations --------------------------

data List = Empty | Cons [3, List] .

listInsert : (integer, integer) -> List -> List .
listInsert p list =
    case list of
    ; Empty          -> Cons [p, Empty]
    ; Cons [q, rest] ->
        if   (fst p) <= (fst q)
        then Cons [p, (listInsert q rest)]
        else Cons [q, (listInsert p rest)] .

listDelete : (integer, integer) -> List -> List .
listDelete p list = 
    case list of
    ; Empty         -> Empty
    ; Cons [q, xs] -> 
        if   (equalPairs p q)
        then xs
        else Cons [q, (listDelete p xs)] .

listUnion : List -> List -> List .
listUnion l1 l2 =
    case l1 of
    ; Empty          -> l2
    ; Cons [p, rest] ->
        case l2 of
        ; Empty           -> listInsert p l2
        ; Cons [q, rrest] ->
            if   (equalPairs p q)
            then listUnion (listDelete p l1) l2
            else listUnion (listDelete p l1) (listInsert p l2) .

lookup : integer -> List -> Maybe .
lookup k1 l =
    case l of
    ; Empty        -> Nothing
    ; Cons [(k, v), xs] ->
        if   (equal k k1)
        then Just [v]
        else (lookup k1 xs) .

unionByFst : List -> List -> List .
unionByFst l1 l2 =
    case l1 of
    ; Empty          -> l2
    ; Cons [p, rest] -> 
        case l2 of
        ; Empty -> listInsert p l2
        ; Cons [q, rrest] ->
            if   (equal (fst p) (fst q))
            then unionByFst (listDelete p l1) l2
            else unionByFst (listDelete p l1) (listInsert p l2) .

toList : BST -> List .
toList t = 
    case t of
    ; Leaf              -> Empty
    ; Node [l, k, v, r] -> listInsert (k, v) (listUnion (toList l) (toList r)) .

equalLists : List -> List -> boolean .
equalLists l1 l2 =
    case l1 of
    ; Empty ->
        (case l2 of
        ; Empty        -> true
        ; Cons [z, zs] -> false)
    ; Cons [x, xs] ->
        (case l2 of
        ; Empty        -> false
        ; Cons [y, ys] ->
            if   equalPairs x y
            then true
            else false) .

filter : (0 -> boolean) -> List -> List .
filter f list =
    case list of
    ; Empty        -> Empty
    ; Cons [x, xs] ->
        let rest = filter f xs in
            if   f x
            then Cons [x, rest]
            else rest .

without : integer -> List -> List .
without key list = filter (\p -> not (equal (fst p) key)) list .

deleteKey : integer -> List -> List .
deleteKey key list = without key list .

concat : List -> List -> List .
concat l1 l2 =
    case l1 of
    ; Empty        -> l2
    ; Cons [x, xs] -> Cons [x, (concat xs l2)] .

insertions : BST -> List .
insertions t =
    case t of
    ; Leaf              -> Empty
    ; Node [l, k, v, r] -> Cons [(k, v), (concat (insertions l) (insertions r))] .

sort : List -> List .
sort list =
    case list of
    ; Empty        -> Empty 
    ; Cons [x, xs] -> listInsert x (sort xs) .

// ============================ BST properties ============================

// --------------------------- Validity testing ---------------------------

property nil-valid .
    valid nil .

property insert-valid k v t .
 if   valid t
 then valid (insert k v t)
 else true .

property delete-valid k v t .
  if   valid t
  then valid (delete k t)
  else true .

property union-valid t1 t2 .
    if   and (valid t1) (valid t2)
    then valid (union t1 t2)
    else true .

// ------------------------ Model-based properties ------------------------

property nil-model .
    equalLists (toList nil) Empty .

property insert-model k v t .
    equalLists (toList (insert k v t))
               (listInsert (k, v) (deleteKey k (toList t))) .

property delete-model k t .
    equalLists (toList (delete k t))
               (deleteKey k (toList t)) .

// FIXME: Fails
property union-model t t1 .
    equalLists (toList (union (validify t) (validify t1)))
               (sort (unionByFst (toList (validify t)) (toList (validify t1)))) .

property find-model k t .
    equalMaybes ((find k t),
                (lookup k (toList t))) .

// ---------------------------- Postconditions ----------------------------

property insert-post k1 v1 t1 k2 .
    equalMaybes (find k2 (insert k1 v1 t1),
                (if (equal k1 k2) then (Just [v1]) else (find k2 t1))) .

property insert-post-same-key k v t .
    equalMaybes ((find k (insert k v t)),
                (if (equal k k) then Just [v] else find k t)) .

property union-post t1 t2 k .
    equalMaybes ((find k (union t1 t2)),
                (case find k t1 of
                ; Just [v] -> Just [v]
                ; Nothing  -> 
                    (case find k t2 of
                    ; Just [v1] -> Just [v1]
                    ; Nothing   -> Nothing))) .

property find-post-present k v t .
    equalMaybes ((find k (insert k v t)),
                 (Just [v])) .

property find-post-absent k t .
    equalMaybes ((find k (delete k t)),
                Nothing) .

property insert-delete-complete k t .
    case (find k t) of
    ; Nothing  -> equalBSTs t (delete k t)
    ; Just [v] -> equalBSTs t (insert k v t) .

// ------------------------ Metamorphic properties ------------------------

property insert-insert k1 v1 k2 v2 t .
    equalContents (insert k1 v1 (insert k2 v2 t))
                  (if  (equal  k1 k2)
                  then (insert k1 v1 t)
                  else (insert k2 v2 (insert k1 v1 t))) .

property insert-delete k1 v1 k2 t .
    equalContents (insert k1 v1 (delete k2 t))
                  (if  (equal  k1 k2)
                  then (insert k1 v1 t)
                  else (delete k2 (insert k1 v1 t))) .

property insert-union k v t t1 .
    equalContents (insert k v (union t t1))
                  (union (insert k v t) t1) .

// -------------------------- Inductive testing --------------------------

property union-nil t .
    equalBSTs (union nil t)
              (t) .

property union-insert t t1 k v .
    equalContents (union (insert k v t) t1)
                  (insert k v (union t t1)) .

property insert-complete t .
    equalBSTs (validify t)
              (foldl (flip (uncurry insert)) nil (insertions (validify t))) .

property insert-complete-for-delete k t .
    equalBSTs (delete k (validify t))
              (foldl (flip (uncurry insert)) nil (insertions (delete k (validify t)))) .

property insert-complete-for-union t t1 .
    equalBSTs (union (validify t) (validify t1))
              (foldl (flip (uncurry insert)) nil (insertions (union (validify t) (validify t1)))) .